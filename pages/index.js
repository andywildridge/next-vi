import Head from "next/head";
//import Image from 'next/image'
//import AudioPlayer from "../components/AudioPlayer";
import styles from "../styles/Home.module.css";
import { useState, useEffect } from "react";

export default function Home() {
    const [songlist, setSongList] = useState([]);
    const [currentSong, incCurrentSong] = useState(0);
    //const tracks = [{title:1}];

    useEffect(() => {
          function shuffle(a) {
            for (let i = a.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [a[i], a[j]] = [a[j], a[i]];
            }
            return a;
        }
        const getSongs = async (searchResults, index) => {
          const fetchResultDetails = await fetch(
            `https://archive.org/metadata/${searchResults[index].identifier}`
          );
          const resultDetails = await fetchResultDetails.json();
          console.log("search result:", resultDetails);

          const baseUrl = `https://${resultDetails.d1}${resultDetails.dir}/`;
          let mp3s = resultDetails.files
              .filter((f) => f.format === "VBR MP3" )
              .map((f) => ({
                  url: baseUrl + f.name,
                  title: f.title ? f.title :  f.name.replace('.mp3', '').replace(/[0-9]/g, ''),
                  length: f.length,
              }));
          shuffle(mp3s);
          if(mp3s.length > 10){
              console.log(mp3s.length, 'trimming');
              mp3s = mp3s.slice(0, 10);
          }
          let combinedLength = songlist.length + mp3s.length;
          console.log("mp3", mp3s, combinedLength);
          setSongList(songlist => [...songlist, ...mp3s]);
          if(combinedLength < 50 && index < searchResults.length - 1){
            console.log('fetch more', combinedLength, searchResults.length - 1);
            getSongs(searchResults, ++index);
          }
        }

        const getData = async (url) => {
            const fetchApitResults = await fetch(url);
            const searchResults = await fetchApitResults.json();
            console.log("search results", searchResults.response.docs);
            getSongs(searchResults.response.docs, 0);
        };

        // getData('https://archive.org/advancedsearch.php?q=mediatype%3A%28audio%29+78rpm+jazz&fl%5B%5D=description&fl%5B%5D=identifier&fl%5B%5D=item_size&fl%5B%5D=mediatype&fl%5B%5D=name&fl%5B%5D=source&fl%5B%5D=title&sort%5B%5D=&sort%5B%5D=&sort%5B%5D=&rows=5&page=1&output=json');
        let searchterm = 'japan';
        let sorttype = '__random+asc';
        let rows = 10;
        getData(
            `https://archive.org/advancedsearch.php?q=mediatype%3A%28audio%29+78rpm+${searchterm}&fl%5B%5D=description&fl%5B%5D=identifier&fl%5B%5D=item_size&fl%5B%5D=mediatype&fl%5B%5D=name&fl%5B%5D=source&fl%5B%5D=title&sort%5B%5D=${sorttype}&sort%5B%5D=&sort%5B%5D=&rows=${rows}&page=1&output=json`
        );
    }, []);

    const handleEnd = () => {
        incCurrentSong(currentSong + 1);
    };

    let audioRef = null;

    const handlePlay = () => {
      let promise = audioRef.play();

      if (promise !== undefined) {
          promise.then(_ => {
              // Autoplay started!
          }).catch(error => {
            console.log('user to initiate play')
              // Autoplay was prevented.
              // Show a "Play" button so that user can start playback.
          });
      }
    };

    return (
        <div className={styles.container}>
            <Head>
                <title>Create Next App</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <main className={styles.main}>
                {/*}<AudioPlayer tracks={tracks} />*/}
                {songlist.length && (
                    <>
                        <p>{songlist[currentSong].title}</p>
                        <p>{songlist[currentSong].description}</p>
                        <p>{songlist[currentSong].length}</p>
                        <audio
                            src={songlist[currentSong].url}
                            ref={(input) => {
                                audioRef = input;
                            }}
                            controls
                            onEnded={handleEnd}
                            onCanPlay={handlePlay}
                        ></audio>
                        <p>{songlist.length}</p>
                    </>
                )}
                {songlist.length &&
                    songlist.map((i, idx) => {
                          return (
                              <div className={styles.songList} key={idx}>
                                  <p>
                                      {i.title}
                                  </p>
                                  <a target="_blank" href={i.url}>
                                      {i.url}
                                  </a>
                              </div>
                          );
                      })}

                {/*<h1 className={styles.title}>
          Welcome to <a href="https://nextjs.org">Next.js!</a>
        </h1>

        <p className={styles.description}>
          Get started by editing{' '}
          <code className={styles.code}>pages/index.js</code>
        </p>

        <div className={styles.grid}>
          <a href="https://nextjs.org/docs" className={styles.card}>
            <h2>Documentation &rarr;</h2>
            <p>Find in-depth information about Next.js features and API.</p>
          </a>

          <a href="https://nextjs.org/learn" className={styles.card}>
            <h2>Learn &rarr;</h2>
            <p>Learn about Next.js in an interactive course with quizzes!</p>
          </a>

          <a
            href="https://github.com/vercel/next.js/tree/master/examples"
            className={styles.card}
          >
            <h2>Examples &rarr;</h2>
            <p>Discover and deploy boilerplate example Next.js projects.</p>
          </a>

          <a
            href="https://vercel.com/new?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
            className={styles.card}
          >
            <h2>Deploy &rarr;</h2>
            <p>
              Instantly deploy your Next.js site to a public URL with Vercel.
            </p>
          </a>
  </div>*/}
            </main>

            <footer className={styles.footer}>
                <p>Footer</p>
                {/*<a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>*/}
            </footer>
        </div>
    );
}
